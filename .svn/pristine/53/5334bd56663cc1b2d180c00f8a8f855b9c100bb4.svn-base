<?xml version="1.0" encoding="UTF-8"?>
<web-app id="WebApp_9" version="2.4" xmlns="http://java.sun.com/xml/ns/j2ee"
 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
 xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd">

    <display-name>Archetype Created Web Application</display-name>
    <filter>  
        <filter-name>Set Character Encoding</filter-name>  
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>  
        <init-param>  
            <param-name>encoding</param-name>  
            <param-value>UTF-8</param-value>  
        </init-param>  
        <init-param>  
            <param-name>forceEncoding</param-name>  
            <param-value>true</param-value><!-- 强制进行转码 -->  
        </init-param>  
    </filter>  
  
    <filter-mapping>  
        <filter-name>Set Character Encoding</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>
    
    <servlet>
         <servlet-name>imagemark</servlet-name>
         <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
         <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
		<servlet-name>imagemark</servlet-name>
		<!-- 拦截了所有请求会导致静态资源无法访问，所以要在imagemark-servlet.xml中配置mvc:resources -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>
	<servlet>
		<servlet-name>SignServlet</servlet-name>
		<servlet-class>com.image.sso.SignServlet</servlet-class>
	</servlet>
	<servlet-mapping>
		<servlet-name>SignServlet</servlet-name>
		<url-pattern>/servlet/SignServlet</url-pattern>
	</servlet-mapping>
     
    <listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<!-- 加载其它的配置文件 -->
	<context-param>
  		<param-name>contextConfigLocation</param-name>
  		<param-value>
  			/WEB-INF/applicationContext.xml,
  			/WEB-INF/imagemark-security.xml
  		</param-value>
 	</context-param>
 	
 	<listener>
 		<listener-class>
			 org.springframework.security.web.session.HttpSessionEventPublisher 
 		</listener-class>
 	</listener>
    <!-- 然后接着是SpringSecurity必须的filter 优先配置，让SpringSecurity先加载，防止SpringSecurity拦截失效-->
    <!-- SpringSecurity会自动创建一个ID为 springSecurityFilterChain的过滤器Bean，它可链接一系列Servlet过滤器，而当配置
    <http>元素时，会自动创建这些bean-->  
    <filter>  
        <filter-name>springSecurityFilterChain</filter-name>  
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>  
    </filter>  
  
    <filter-mapping>  
        <filter-name>springSecurityFilterChain</filter-name>  
        <url-pattern>/*</url-pattern>  
    </filter-mapping>
    
   	<!-- <session-config>
 		<session-timeout>20</session-timeout>
 	</session-config>

 	Spring刷新Interceptor防止内存泄漏
 	<listener>
 		<listener-class>
 			org.springframework.web.util.IntrospectorCleanupListener
 		</listener-class>
 	</listener>
   	
	所以，要在web.xml下面配置好监听，让服务器启动时就初始化改类，可以得到request
	 <listener>  
        <listener-class>    
            org.springframework.web.context.request.RequestContextListener  
        </listener-class>  
    </listener> -->
    <welcome-file-list>
         <welcome-file>index.jsp</welcome-file>
    </welcome-file-list>
</web-app>
